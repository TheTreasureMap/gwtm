# templates/database/db-init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "gwtm.labels" . | nindent 4 }}
    app: db-init
spec:
  template:
    metadata:
      name: db-init
      labels:
        app: db-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: db-init
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        command: ["python", "-c", "from src.models import create_database_tables; create_database_tables()"]
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-user
        - name: DB_PWD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-name
        - name: DB_HOST
          value: {{ .Values.database.name }}
        - name: DB_PORT
          value: "{{ .Values.database.service.port }}"
      initContainers:
      - name: wait-for-db
        image: postgres:14-alpine
        command: ['sh', '-c', 'echo "Testing connection to ${DB_HOST}:${DB_PORT}..."; 
                 until pg_isready -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME}; do
                 echo "$(date) - Waiting for database at ${DB_HOST}:${DB_PORT}..."; 
                 echo "Trying to ping database...";
                 nc -v -z -w2 ${DB_HOST} ${DB_PORT} || echo "Network connection failed";
                 sleep 5; 
                 done; 
                 echo "Database is ready!"']
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-name
        - name: DB_HOST
          value: {{ .Values.database.name }}
        - name: DB_PORT
          value: "{{ .Values.database.service.port }}"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-password
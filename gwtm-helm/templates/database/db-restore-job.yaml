{{- if .Values.database.restore.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: db-restore
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "gwtm.labels" . | nindent 4 }}
    app: db-restore
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"  # Run after db-init (weight 1)
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: 3600  # Keep job for 1 hour after completion
  template:
    metadata:
      name: db-restore
      labels:
        app: db-restore
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-db
        image: postgres:14-alpine
        command: ['sh', '-c', 'echo "Testing connection to ${DB_HOST}:${DB_PORT}..."; 
                 until PGPASSWORD=$DB_PASSWORD psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c "SELECT 1" > /dev/null 2>&1; do
                 echo "$(date) - Waiting for database at ${DB_HOST}:${DB_PORT} to be ready for connections..."; 
                 sleep 5; 
                 done; 
                 echo "Database is ready for connections!"']
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-name
        - name: DB_HOST
          value: {{ .Values.database.name }}
        - name: DB_PORT
          value: "{{ .Values.database.service.port }}"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-password
      - name: copy-sql-dump
        image: busybox:latest
        command: ['sh', '-c', 'mkdir -p /dump && echo "Checking SQL dump directory" && ls -la /sql-dump/ && echo "SQL dump directory status: $?"']
        volumeMounts:
        - name: dump-volume
          mountPath: /dump
        - name: sql-dump-volume
          mountPath: /sql-dump
      containers:
      - name: db-restore
        image: postgres:14-alpine
        command: ['sh', '-c', '
          set -x
          # Debug info
          echo "Environment variables:"
          echo "DB_HOST=$DB_HOST"
          echo "DB_USER=$DB_USER" 
          echo "DB_NAME=$DB_NAME"
          echo "SQL dump directory contents:"
          ls -la /sql-dump/
          
          # Copy SQL dump to temporary volume
          {{- if eq .Values.database.restore.method "hostPath" }}
          echo "Using hostPath method, copying file to dump directory"
          cp /sql-dump/{{ .Values.database.restore.sqlDumpPath }} /dump/ || { echo "Error copying file - details:"; ls -la /sql-dump/; exit 1; }
          {{- else if eq .Values.database.restore.method "configMap" }}
          echo "Using configMap method, copying file to dump directory"
          cp /sql-dump/{{ .Values.database.restore.configMapKey }} /dump/ || { echo "Error copying file - details:"; ls -la /sql-dump/; exit 1; }
          {{- end }}
          
          # Verify copy worked
          echo "Dump directory contents:"
          ls -la /dump/
          
          # Import the SQL dump
          {{- if eq .Values.database.restore.method "hostPath" }}
          echo "Importing SQL dump from hostPath"
          PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f /dump/{{ .Values.database.restore.sqlDumpPath }}
          {{- else if eq .Values.database.restore.method "configMap" }}
          echo "Importing SQL dump from configMap"
          PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f /dump/{{ .Values.database.restore.configMapKey }}
          {{- end }}
          
          echo "Database restoration completed"
        ']
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: db-name
        - name: DB_HOST
          value: {{ .Values.database.name }}
        - name: DB_PORT
          value: "{{ .Values.database.service.port }}"
        volumeMounts:
        - name: dump-volume
          mountPath: /dump
        - name: sql-dump-volume
          mountPath: /sql-dump
      volumes:
      - name: dump-volume
        emptyDir: {}
      {{- if eq .Values.database.restore.method "hostPath" }}
      - name: sql-dump-volume
        hostPath:
          path: {{ .Values.database.restore.sqlDumpDir | default "/tmp" }}
          type: Directory
      {{- else if eq .Values.database.restore.method "configMap" }}
      - name: sql-dump-volume
        configMap:
          name: {{ .Values.database.restore.configMapName }}
      {{- else }}
      # Default to emptyDir if method is not specified
      - name: sql-dump-volume
        emptyDir: {}
      {{- end }}
{{- end }}